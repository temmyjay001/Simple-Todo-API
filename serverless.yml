service: oneLiquidityTodo

#frameworkVersion: "3"

custom:
  serverless-offline:
    resourceRoutes: true
  dynamodb:
    start:
      port: 5200
      migrate: true
    stages:
      - dev

provider:
  name: aws
  lambdaHashingVersion: 20201221
  runtime: nodejs12.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Scan
          Resource:
            - Fn::GetAtt: [TodosTable, Arn]

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  createTodo:
    handler: src/functions/createTodo.handler
    events:
      - httpApi:
          path: /api/todos
          method: post
  getTodo:
    handler: src/functions/getTodo.handler
    events:
      - httpApi:
          path: /api/todos/{id}
          method: get
  getAllTodos:
    handler: src/functions/getAllTodos.handler
    events:
      - httpApi:
          path: /api/todos
          method: get
  updateTodo:
    handler: src/functions/updateTodo.handler
    events:
      - httpApi:
          path: /api/todos/{id}
          method: put
  deleteTodo:
    handler: src/functions/deleteTodo.handler
    events:
      - httpApi:
          path: /api/todos/{id}
          method: delete

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

# you can add CloudFormation resource templates here
resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Todos
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
